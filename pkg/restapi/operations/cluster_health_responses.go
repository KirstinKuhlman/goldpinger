// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bloomberg/goldpinger/v3/pkg/models"
)

// ClusterHealthOKCode is the HTTP code returned for type ClusterHealthOK
const ClusterHealthOKCode int = 200

/*ClusterHealthOK Healthy cluster

swagger:response clusterHealthOK
*/
type ClusterHealthOK struct {

	/*
	  In: Body
	*/
	Payload *models.ClusterHealthResults `json:"body,omitempty"`
}

// NewClusterHealthOK creates ClusterHealthOK with default headers values
func NewClusterHealthOK() *ClusterHealthOK {

	return &ClusterHealthOK{}
}

// WithPayload adds the payload to the cluster health o k response
func (o *ClusterHealthOK) WithPayload(payload *models.ClusterHealthResults) *ClusterHealthOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cluster health o k response
func (o *ClusterHealthOK) SetPayload(payload *models.ClusterHealthResults) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClusterHealthOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClusterHealthIMATeapotCode is the HTTP code returned for type ClusterHealthIMATeapot
const ClusterHealthIMATeapotCode int = 418

/*ClusterHealthIMATeapot Unhealthy cluster

swagger:response clusterHealthIMATeapot
*/
type ClusterHealthIMATeapot struct {

	/*
	  In: Body
	*/
	Payload *models.ClusterHealthResults `json:"body,omitempty"`
}

// NewClusterHealthIMATeapot creates ClusterHealthIMATeapot with default headers values
func NewClusterHealthIMATeapot() *ClusterHealthIMATeapot {

	return &ClusterHealthIMATeapot{}
}

// WithPayload adds the payload to the cluster health i m a teapot response
func (o *ClusterHealthIMATeapot) WithPayload(payload *models.ClusterHealthResults) *ClusterHealthIMATeapot {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cluster health i m a teapot response
func (o *ClusterHealthIMATeapot) SetPayload(payload *models.ClusterHealthResults) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClusterHealthIMATeapot) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(418)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
